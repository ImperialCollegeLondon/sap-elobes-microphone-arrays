classdef RigidSphere_20210224_01_em32_locata_refchan_13 < RigidSphereArray
    properties (SetAccess=protected)
        % properties from ElobesMicArray already implemented in SphericalHarmonicSoundFieldArray
        
    end
    methods
        function[obj] = RigidSphere_20210224_01_em32_locata_refchan_13()
            
            % use superclass to create the object with input parameter
            obj = obj@RigidSphereArray(0.042);
            
            % override the default properties of the superclass
            obj.sensorCartesianPositionsDefault = predefinedSensorPositions();
            obj.refChan = 13; % reference is the origin
        end
        
    end
    
end

function[sensor_pos] = predefinedSensorPositions()
% evaluate to determine the postitions of the elements relative to
% the origin
nMics = 32;
radius = 0.042;     % radius on which microphones lie [metres]


sensor_angles_deg = [69 90;...
    90 122;...
    111 90;...
    90 58;...
    32 90;...
    55 135;...
    90 159;...
    125 135;...
    148 90;...
    125 45;...
    90 21;...
    55 45;...
    21 -179;...
    58 180;...
    121 180;...
    159 179;...
    69 -90;...
    90 -58;...
    111 -90;...
    90 -122;...
    32 -90;...
    55 -45;...
    90 -21;...
    125 -45;...
    148 -90;...
    125 -135;...
    90 -159;...
    55 -135;...
    21 -1;...
    58 0;...
    122 0;...
    159 1];
inc = sensor_angles_deg(:,1)*pi/180;
az = sensor_angles_deg(:,2)*pi/180;

sensor_pos = radius * [cos(az).*sin(inc), sin(az).*sin(inc), cos(inc)]; % [x,y,z] offsets of sensors


%% Don't currently implement a sampling scheme that uses quadrature weights
%  put these here for future reference

% Quadrature weight for microphone at centre of pentagonal face
quad_pent = 5*pi/42;
% Quadrature weight for microphone at centre of hexagonal face
quad_hex = 9*pi/70;

quad = zeros(nMics, 1);
% All microphones are at centre of hexagonal face, except...
quad(1:nMics) = quad_hex;
% 12 microphones which are at centre of pentagonal face
quad([2 4 5 9 14 15 18 20 21 25 30 31]) = quad_pent;


end